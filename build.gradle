plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.9

repositories {
    mavenCentral()
}

dependencies {


    implementation group: 'com.groupdocs', name: 'groupdocs-java-client', version: '2.5.1'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation 'com.opencsv:opencsv:5.6'


    implementation group: 'joda-time', name: 'joda-time', version: '2.11.1'
    implementation group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13.2'
    testImplementation group: 'org.testng', name: 'testng', version: '7.5'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    testImplementation group: 'net.sourceforge.jexcelapi', name: 'jxl', version: '2.6.12'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.8.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.20.0'
    implementation group: 'com.oracle.database.jdbc', name: 'ojdbc6', version: '11.2.0.4'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'

    implementation group: 'net.sourceforge.jtds', name: 'jtds', version: '1.2'
    implementation fileTree(dir: 'dependencias', includes: ['*.jar'])
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-devtools-v129', version: '4.25.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version: '4.25.0'
    implementation group: 'com.github.kklisura.cdt', name: 'cdt-java-client', version: '1.3.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation group: 'org.json', name: 'json', version: '20090211'
    implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.1'
 //   implementation group: 'net.sf.jt400', name: 'jt400', version: '9.2'
 //   implementation group: 'com.ibm.as400', name: 'jt400', version: '9.1'
    //    implementation group: 'net.sf.jt400', name: 'jt400-jdk8', version: '10.7'
    implementation group: 'net.sf.jt400', name: 'jt400', version: '20.0.7'
}

test {
    useTestNG()
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task Jira (type:Test) {
    if(!System.getProperty("browser").equals(null)){
        systemProperty "browser", System.getProperty("browser").toString()
    }
    if(!System.getProperty('pipeline').equals(null)){
        systemProperty "pipeline", System.getProperty("pipeline").toString()
    }
    if(!System.getProperty('environment').equals(null)){
        systemProperty "environment", System.getProperty("environment").toString()
    }

    useTestNG() {
        println "Se inicia la ejecucion de los scripts automatizados";
        useDefaultListeners = true
        reports.html.enabled = false
        ignoreFailures = true
        def dir = System.getProperty("testngReportOutput")
        outputDirectory = dir ? file(dir) : file("resultados")
        mustRunAfter clean
     //   maxParallelForks = 5
        filter {
            if(findProperty('package')) {
                carpeta = project.property('package').toString()
                carpeta="*.".concat(carpeta).concat(".*")
                try {
                    if (project.property('testCase').toString().equals("") || project.property('testCase').toString() == null) {
                        includeTestsMatching(carpeta)
                    }
                }catch(Exception e){
                    includeTestsMatching(carpeta)
                }
            }
            if(findProperty('funcionabilidad')) {
                def funcionabilidad = project.property('funcionabilidad').toString()
                includeGroups funcionabilidad
            }
            if (findProperty('testCase')) {
                def testCase = project.property('testCase').toString().split(",")
                Integer i = 0
                for (item in testCase) {
                    try {
                        if (project.property('package').toString().equals("") || project.property('package').toString() == null) {
                            includeTestsMatching(testCase[i])
                        } else includeTestsMatching(carpeta + "." + testCase[i])
                    }catch(Exception e){
                        includeTestsMatching(testCase[i])
                    }
                    i++
                }
            }
        }
    }

}
task JiraFail (type:Test) {
    if(!System.getProperty('pipeline').equals(null)){
        systemProperty "pipeline", System.getProperty("pipeline").toString()
    }
    if(!System.getProperty('environment').equals(null)){
        systemProperty "environment", System.getProperty("environment").toString()
    }
    useTestNG() {
        useDefaultListeners = true
        reports.html.enabled = false
        options.suites("resultados/testng-failed.xml")
        ignoreFailures = true
        def dir = System.getProperty("testngReportOutput")
        outputDirectory = dir ? file(dir) : file("resultados")
    }
}


targetCompatibility = JavaVersion.VERSION_1_9
